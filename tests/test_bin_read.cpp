#include "catch.hpp"
#include "../include/bin_read.hpp"

#include <fstream>          // due to ofs
#include <cstdio>           // due to remove
#include <iostream>
using namespace std;

TEST_CASE("Test databin_read with small file") {
// Ορίζουμε τα σημεία στην αρχική μορφή τους: C | T | d1 | ... | d100
    vector<vector<float>> points_input;
    vector<float> point1 = {0, 0.0238129, 2.15454, -3.02897, 0.698244, -0.415859, 2.10826, -0.423406, -0.265021, 1.48845, -0.635659, -0.322034, 0.288786, 1.50423, 0.60534, -0.0444409, 1.72059, 0.847015, -0.307805, 0.759683, 1.29945, -0.181562, 0.463562, -0.193746, 0.649952, -1.15263, 0.048541, -0.627288, 0.398051, 0.0511783, 0.545563, 0.0495269, 0.0687726, -0.631042, 0.0826486, 0.731219, -0.226549, 0.215328, -0.148697, 0.413595, 0.0921035, 0.458715, -0.253046, -0.0336558, -0.337412, -0.170269, 0.313249, 0.498627, 0.464264, 0.672622, 0.725523, 0.003511, -0.345974, 0.498223, -0.345793, 0.161103, -0.00469103, 0.0290951, -0.28487, -0.35776, -0.37224, -0.371342, 0.515504, 0.162517, 0.0253236, 0.560636, 0.49534, 0.166332, -0.346384, 0.416897, 0.250396, -0.552659, 0.50076, 0.157336, -0.0468045, -0.460763, 0.540153, 0.0880996, -0.259423, -0.285234, 0.442767, 0.17183, 0.0573628, -0.44357, -0.247626, 0.135093, 0.238867, 0.00215004, -0.139578, -0.425506, 0.164526, 0.342528, 0.432775, -0.433014, -0.301049, -0.487173, 0.0114285, 0.386267, 0.16443, 0.0441171, 0.269416, -0.487473};
    vector<float> point2 = {5, 0.0178948, 3.26202, 1.56577, -0.0684099, -0.737793, -1.8544, -0.254527, 1.65552, 1.00833, 0.409859, -0.58229, 0.214514, 1.13399, 0.67804, 0.0556019, -0.308498, 1.36047, 0.406855, 0.0017132, 0.124005, -0.68474, -0.572021, -1.49608, -1.86856, 1.46811, 0.364149, 0.124949, -0.358147, 0.563753, 0.592939, -0.512148, -0.464038, 0.508057, -0.0594044, -0.777964, -0.14287, -0.595914, -0.351113, 0.426441, 0.00503074, 0.922792, 0.5508, 0.245417, 0.0870943, 0.287218, -0.259367, -0.0862109, 0.412294, -0.527403, -0.212971, 0.613519, -0.197322, 0.0963755, 0.191313, -0.0708244, 0.501856, -0.27319, -0.350463, -0.734249, -0.0255927, -0.558735, -0.321838, -0.0775046, 0.515006, -0.41098, -0.459845, -0.396148, -0.387778, -0.602314, -0.930792, 0.552028, 0.0922078, -0.394001, 0.445335, 0.303109, 0.495165, -0.145585, 0.0042617, -0.00186817, -0.0232262, 0.36179, 0.322431, 0.340549, 0.697516, -0.00626198, 0.324457, 0.806469, 0.302298, 0.282206, -0.203537, -0.131816, 0.0834625, -0.182271, 0.0991221, 0.359114, -0.522822, -0.523069, -0.486342, 0.0311416, -0.123481, -0.303604};
    points_input.push_back(point1);
    points_input.push_back(point2);

// Γράφουμε τα points σε binary αρχείο, στη μορφή που η databin_read περιμένει να διαβάσει το αρχείο.
// Προσθέτουμε, δηλαδή, στην αρχή του αρχείου έναν ακέραιο που υποδεικνύει το πλήθος των points που περιέχει το αρχείο
// source: https://github.com/transactionalblog/sigmod-contest-2024/blob/eeba09101429f2fffe18e02a282b4bb70b87ddd1/io.h#L22
    ofstream ofs("output.bin", ios::out | ios::binary);
    const int num_dimensions = 102;
    const uint32_t N = points_input.size();

    // Save value of N first into the file
    ofs.write(reinterpret_cast<const char *>(&N), sizeof(uint32_t));        // N is an int

    assert(points_input.front().size() == num_dimensions);
    for (unsigned i = 0; i < N; ++i) {
        auto const &point = points_input[i];
        ofs.write(reinterpret_cast<char const *>(&point[0]), num_dimensions * sizeof(float));
    }
    ofs.close();

// Τα αποτελέσματα της databin_read θα πρέπει να είναι τα εξής:
// (στα points δεν θα πρέπει να υπάρχει το πεδίο Τ, αλλά τα υπόλοιπα να είναι ίδια)
    vector<vector<float>> points_output;
    vector<float> p1 = {0, 2.15454, -3.02897, 0.698244, -0.415859, 2.10826, -0.423406, -0.265021, 1.48845, -0.635659, -0.322034, 0.288786, 1.50423, 0.60534, -0.0444409, 1.72059, 0.847015, -0.307805, 0.759683, 1.29945, -0.181562, 0.463562, -0.193746, 0.649952, -1.15263, 0.048541, -0.627288, 0.398051, 0.0511783, 0.545563, 0.0495269, 0.0687726, -0.631042, 0.0826486, 0.731219, -0.226549, 0.215328, -0.148697, 0.413595, 0.0921035, 0.458715, -0.253046, -0.0336558, -0.337412, -0.170269, 0.313249, 0.498627, 0.464264, 0.672622, 0.725523, 0.003511, -0.345974, 0.498223, -0.345793, 0.161103, -0.00469103, 0.0290951, -0.28487, -0.35776, -0.37224, -0.371342, 0.515504, 0.162517, 0.0253236, 0.560636, 0.49534, 0.166332, -0.346384, 0.416897, 0.250396, -0.552659, 0.50076, 0.157336, -0.0468045, -0.460763, 0.540153, 0.0880996, -0.259423, -0.285234, 0.442767, 0.17183, 0.0573628, -0.44357, -0.247626, 0.135093, 0.238867, 0.00215004, -0.139578, -0.425506, 0.164526, 0.342528, 0.432775, -0.433014, -0.301049, -0.487173, 0.0114285, 0.386267, 0.16443, 0.0441171, 0.269416, -0.487473};
    vector<float> p2 = {5, 3.26202, 1.56577, -0.0684099, -0.737793, -1.8544, -0.254527, 1.65552, 1.00833, 0.409859, -0.58229, 0.214514, 1.13399, 0.67804, 0.0556019, -0.308498, 1.36047, 0.406855, 0.0017132, 0.124005, -0.68474, -0.572021, -1.49608, -1.86856, 1.46811, 0.364149, 0.124949, -0.358147, 0.563753, 0.592939, -0.512148, -0.464038, 0.508057, -0.0594044, -0.777964, -0.14287, -0.595914, -0.351113, 0.426441, 0.00503074, 0.922792, 0.5508, 0.245417, 0.0870943, 0.287218, -0.259367, -0.0862109, 0.412294, -0.527403, -0.212971, 0.613519, -0.197322, 0.0963755, 0.191313, -0.0708244, 0.501856, -0.27319, -0.350463, -0.734249, -0.0255927, -0.558735, -0.321838, -0.0775046, 0.515006, -0.41098, -0.459845, -0.396148, -0.387778, -0.602314, -0.930792, 0.552028, 0.0922078, -0.394001, 0.445335, 0.303109, 0.495165, -0.145585, 0.0042617, -0.00186817, -0.0232262, 0.36179, 0.322431, 0.340549, 0.697516, -0.00626198, 0.324457, 0.806469, 0.302298, 0.282206, -0.203537, -0.131816, 0.0834625, -0.182271, 0.0991221, 0.359114, -0.522822, -0.523069, -0.486342, 0.0311416, -0.123481, -0.303604};
    points_output.push_back(p1);
    points_output.push_back(p2);

// Κλήση συνάρτησης & έλεγχος αποτελεσμάτων
    vector<vector<float>> points_results = databin_read("output.bin");
    REQUIRE(points_output == points_results);

// Διαγραφή του αρχείου "output.bin"
    remove("output.bin");
}

TEST_CASE("Test queriesbin_read with small file") {
// Ορίζουμε τα queries στην αρχική μορφή τους: qt | c | l | r | d1 | ... | d100
    vector<vector<float>> queries_input;
// Ορίζουμε ένα query για κάθε query_type (έτσι πετυχαίνουμε πιο ολοκληρωμένο έλεγχο της συνάρτησης)
    vector<float> query0 = {0, -1, -1, -1, 0.0892586, -0.150291, -0.821048, 0.344949, -0.589355, 0.944352, -0.667804, 0.305992, -2.13121, 1.73406, -0.949898, 2.06183, 0.537979, 0.328789, -0.0176721, -0.562069, -0.621625, 0.840873, 0.591859, 0.275412, 0.937918, -0.0616842, 0.809946, -1.05696, 1.19051, -0.0321672, -0.369298, 0.679628, -1.07731, 0.390322, -0.454751, -0.32243, -0.615295, 1.18967, 0.721884, 0.104513, -0.0959466, 0.0282482, 0.0742209, 0.341131, 0.257043, 0.0100733, -0.0585112, -0.417733, -0.613679, 0.805337, -0.203679, 0.155731, 0.184432, -0.253783, 0.399551, 0.321999, -0.440549, -0.303851, 0.0522588, 0.177387, 0.334058, 0.197412, 0.00448788, 0.990222, 0.494329, -0.448112, 0.206554, -0.730439, 0.170579, 0.0226756, 0.0322761, 0.00679316, -0.324175, -0.556499, 0.353944, -0.355755, -0.542616, -0.244421, 0.439767, -0.309919, -0.0356684, 0.200207, -0.387314, -0.357522, 0.0969972, 0.615141, 0.361333, 0.208315, 0.0530467, 0.395783, 0.294819, 0.558363, -0.487409, 0.526882, 0.497473, 0.17107, 0.0201734, -0.179488, 0.0901327, -0.490539, -0.358719, -0.236438, 0.0852151, -0.542886};
    vector<float> query1 = {1, 11, -1, -1, 1.15318, 3.48789, 1.15106, -2.15013, -1.7307, -0.865003, 0.539356, -2.2483, 0.0266666, 0.506131, 1.99889, -0.454397, -0.397768, -0.0976118, 0.0852407, 0.615608, 0.315122, -0.921573, 0.174508, -0.0639016, 1.60073, -0.847733, -0.265222, -0.20577, -1.24012, -0.0312053, -0.362713, 0.157694, -0.366923, 0.936518, -0.411577, -0.632914, -0.0141731, -0.872624, 0.639087, -0.541806, -1.34181, 0.837421, 0.560119, -0.319871, 0.252393, -0.329201, -0.478039, 0.206487, 0.397613, 0.277722, 0.39587, -0.427076, -0.539165, -0.167498, -0.0436071, -0.650684, -0.283721, -0.249859, 0.768415, 0.73718, -0.188308, -0.329515, -0.218634, 0.662387, 0.840186, -0.435279, -0.494708, -0.855063, -0.525039, 0.0260749, 0.292595, 0.446373, -0.12255, 0.0870281, -0.160215, 0.0172979, -0.736598, -0.404041, 0.0168686, -0.28666, -0.751283, -0.319513, -0.154175, -0.34428, 0.0737188, -0.631337, -0.237238, 0.455852, 0.365971, -0.722127, -0.26824, 0.683272, 0.17679, 0.544735, -0.215389, 0.0442407, 0.261029, 0.0632748, -0.285313, 0.214427, -0.526602, -0.0689679, 0.214551, -0.0610696};
    vector<float> query2 = {2, -1, 0.37232, 0.934754, -0.132496, 2.22601, -0.778729, -1.93801, -0.754339, -2.22432, 0.608575, -0.0421852, -1.82952, -1.05132, 0.131342, -0.753501, -0.323551, 1.23851, 0.262756, -0.808485, 0.0234782, 0.00636473, -1.02794, 0.0831598, -0.932493, 0.465452, -0.0966011, 0.73077, -0.407873, -1.14149, -0.40822, -0.163874, 0.423265, 0.583811, 0.310738, 0.403105, -0.160059, -0.534741, -0.17928, 0.511259, -0.343844, -0.24382, -0.309199, 0.145926, 0.324027, -0.796055, -0.319588, 0.380407, 0.392115, -0.0912775, -0.290216, -0.269363, -0.264363, 0.146002, 0.98007, 0.201271, -0.328693, -0.743066, 0.277417, -0.721677, 0.181762, 0.583144, -0.525015, 1.07107, 0.449487, -0.35264, -0.383429, -0.498002, 0.132939, 0.291133, -0.537723, 0.282154, 0.0855619, -0.369657, 0.559115, -0.14258, 0.380709, 0.0888779, 0.242341, 0.658834, 0.76689, 0.721738, 0.327282, 0.0894578, 0.547145, 0.255039, 0.0456532, 0.226249, 0.261746, -0.0666588, -0.0189525, -0.379003, -0.656372, -0.00692024, -0.0755592, -0.205465, -0.0706955, 0.204827, 0.361619, -0.44325, -0.0262675, 0.3287, 0.46499, 0.604529};
    vector<float> query3 = {3, 5, 0.414621, 0.826578, 1.45066, -1.80853, -1.73718, 0.296114, 4.00136, 0.000886056, 1.28455, -0.61341, -1.79488, -0.826857, 0.50891, -0.530469, 0.84432, 0.0832417, 0.293287, 1.12957, 0.993554, 0.537313, -0.961307, 0.307734, -0.529301, 0.0771927, 1.41337, -0.513869, 0.0770242, -0.540269, -0.113865, -0.495865, -0.224893, 0.657589, -0.966777, 0.174292, -0.316182, 0.481107, 0.280451, 0.332702, -0.226182, 0.479345, -0.316211, -0.399186, -0.711128, 0.101906, -0.540704, -0.0930598, -0.376151, 0.0576872, 0.383482, -0.472719, 0.176281, 0.328621, 0.518672, -0.0142336, -0.389488, -0.155023, -0.431887, 0.0807152, -0.0865443, -0.150897, 0.375414, -0.359455, 0.727479, 0.261487, 0.572292, -0.462879, 0.542439, 0.141786, -0.0641713, 0.34446, -0.281942, 0.175925, -0.108077, 0.0925335, 0.172707, 0.445707, -0.373482, -0.221303, -0.111403, -0.338694, 0.068355, -0.255978, 0.482838, 0.333236, -0.260988, -0.144666, 0.246599, 0.218616, -0.432997, 0.234723, 0.182181, 0.0393131, 0.205985, 0.486878, 0.2331, -0.0389379, 0.194809, -0.214071, -0.153389, -0.229371, -0.37458, -0.198541};
    queries_input.push_back(query0);
    queries_input.push_back(query1);
    queries_input.push_back(query2);
    queries_input.push_back(query3);

// Γράφουμε τα queries σε binary αρχείο, στη μορφή που η queriesbin_read περιμένει να διαβάσει το αρχείο.
// Προσθέτουμε, δηλαδή, στην αρχή του αρχείου έναν ακέραιο που υποδεικνύει το πλήθος των queries που περιέχει το αρχείο
// source: https://github.com/transactionalblog/sigmod-contest-2024/blob/eeba09101429f2fffe18e02a282b4bb70b87ddd1/io.h#L22
    ofstream ofs("output.bin", ios::out | ios::binary);
    const int num_dimensions = 104;
    const uint32_t N = queries_input.size();

    // Save value of N first into the file
    ofs.write(reinterpret_cast<const char *>(&N), sizeof(uint32_t));        // N is an int

    assert(queries_input.front().size() == num_dimensions);
    for (unsigned i = 0; i < N; ++i) {
        auto const &query = queries_input[i];
        ofs.write(reinterpret_cast<char const *>(&query[0]), num_dimensions * sizeof(float));
    }
    ofs.close();

// Τα αποτελέσματα της queriesbin_read θα πρέπει να είναι τα εξής:
// (στα queries δεν θα πρέπει να υπάρχουν τα πεδία l, r και θα πρέπει να έχουν αφαιρεθεί τα
// queries με query_type = 2 ή 3)
    vector<vector<float>> queries_output;
    vector<float> q0 = {0, -1, 0.0892586, -0.150291, -0.821048, 0.344949, -0.589355, 0.944352, -0.667804, 0.305992, -2.13121, 1.73406, -0.949898, 2.06183, 0.537979, 0.328789, -0.0176721, -0.562069, -0.621625, 0.840873, 0.591859, 0.275412, 0.937918, -0.0616842, 0.809946, -1.05696, 1.19051, -0.0321672, -0.369298, 0.679628, -1.07731, 0.390322, -0.454751, -0.32243, -0.615295, 1.18967, 0.721884, 0.104513, -0.0959466, 0.0282482, 0.0742209, 0.341131, 0.257043, 0.0100733, -0.0585112, -0.417733, -0.613679, 0.805337, -0.203679, 0.155731, 0.184432, -0.253783, 0.399551, 0.321999, -0.440549, -0.303851, 0.0522588, 0.177387, 0.334058, 0.197412, 0.00448788, 0.990222, 0.494329, -0.448112, 0.206554, -0.730439, 0.170579, 0.0226756, 0.0322761, 0.00679316, -0.324175, -0.556499, 0.353944, -0.355755, -0.542616, -0.244421, 0.439767, -0.309919, -0.0356684, 0.200207, -0.387314, -0.357522, 0.0969972, 0.615141, 0.361333, 0.208315, 0.0530467, 0.395783, 0.294819, 0.558363, -0.487409, 0.526882, 0.497473, 0.17107, 0.0201734, -0.179488, 0.0901327, -0.490539, -0.358719, -0.236438, 0.0852151, -0.542886};
    vector<float> q1 = {1, 11, 1.15318, 3.48789, 1.15106, -2.15013, -1.7307, -0.865003, 0.539356, -2.2483, 0.0266666, 0.506131, 1.99889, -0.454397, -0.397768, -0.0976118, 0.0852407, 0.615608, 0.315122, -0.921573, 0.174508, -0.0639016, 1.60073, -0.847733, -0.265222, -0.20577, -1.24012, -0.0312053, -0.362713, 0.157694, -0.366923, 0.936518, -0.411577, -0.632914, -0.0141731, -0.872624, 0.639087, -0.541806, -1.34181, 0.837421, 0.560119, -0.319871, 0.252393, -0.329201, -0.478039, 0.206487, 0.397613, 0.277722, 0.39587, -0.427076, -0.539165, -0.167498, -0.0436071, -0.650684, -0.283721, -0.249859, 0.768415, 0.73718, -0.188308, -0.329515, -0.218634, 0.662387, 0.840186, -0.435279, -0.494708, -0.855063, -0.525039, 0.0260749, 0.292595, 0.446373, -0.12255, 0.0870281, -0.160215, 0.0172979, -0.736598, -0.404041, 0.0168686, -0.28666, -0.751283, -0.319513, -0.154175, -0.34428, 0.0737188, -0.631337, -0.237238, 0.455852, 0.365971, -0.722127, -0.26824, 0.683272, 0.17679, 0.544735, -0.215389, 0.0442407, 0.261029, 0.0632748, -0.285313, 0.214427, -0.526602, -0.0689679, 0.214551, -0.0610696};
    queries_output.push_back(q0);
    queries_output.push_back(q1);

// Κλήση συνάρτησης & έλεγχος αποτελεσμάτων
    vector<vector<float>> queries_results = queriesbin_read("output.bin");
    REQUIRE(queries_output == queries_results);

// Διαγραφή του αρχείου "output.bin"
    remove("output.bin");
}

TEST_CASE("Test eucl_dist_point_query") {
// Case [1]: query_type = 1, and point matches filter of query
    vector<float> point1 = {1, 0.0, 0.0, 0.0};
    vector<float> query1 = {1, 1, 3.0, 4.0, 0.0};

    double expected_distance = 5.0;                                        // 3^2 + 4^2 = 25, sqrt(25) = 5
    REQUIRE(eucl_dist_point_query(point1, query1) == expected_distance); 

// Case [2]: query_type = 1, and point doesn't match filter of query
    vector<float> point2 = {1, 0.0, 0.0, 0.0};
    vector<float> query2 = {1, 5, 3.0, 4.0, 0.0};

    expected_distance = -1;                                                           
    REQUIRE(eucl_dist_point_query(point2, query2) == expected_distance); 

// Case [3]: query_type = 0
    vector<float> point3 = {5, 0.0, 0.0, 0.0};
    vector<float> query3 = {0, -1, 3.0, 4.0, 0.0};

    expected_distance = 5.0;                                                           
    REQUIRE(eucl_dist_point_query(point3, query3) == expected_distance); 
}

TEST_CASE("Test ground_truth with small amount of points, queries") {
// [1] Δημιουργία των points
    vector<vector<float>> points;

    vector<float> p0;
    p0.push_back(2);        // label of p0
    p0.push_back(1.0);      // d1 of p0
    p0.push_back(1.0);      // d2 of p0
    points.push_back(p0);

    vector<float> p1;
    p1.push_back(2);        // label of p1
    p1.push_back(4.0);      // d1 of p1
    p1.push_back(4.0);      // d2 of p1
    points.push_back(p1);

    vector<float> p2;
    p2.push_back(2);        // label of p2
    p2.push_back(5.0);      // d1 of p2
    p2.push_back(3.0);      // d2 of p2
    points.push_back(p2);

    vector<float> p3;
    p3.push_back(3);        // label of p3
    p3.push_back(6.0);      // d1 of p3
    p3.push_back(2.0);      // d2 of p3
    points.push_back(p3);

// [2] Δημιουργία των queries
    vector<vector<float>> queries;

    vector<float> q0;
    q0.push_back(1);        // query_type of q0
    q0.push_back(2);        // label of q0
    q0.push_back(3.0);      // d1 of q0
    q0.push_back(3.0);      // d2 of q0
    queries.push_back(q0);

    vector<float> q1;
    q1.push_back(1);        // query_type of q1
    q1.push_back(3);        // label of q1
    q1.push_back(3.0);      // d1 of q1
    q1.push_back(3.0);      // d2 of q1
    queries.push_back(q1);

    vector<float> q2;
    q2.push_back(0);        // query_type of q2
    q2.push_back(-1);       // label of q2
    q2.push_back(3.0);      // d1 of q2
    q2.push_back(3.0);      // d2 of q2
    queries.push_back(q2);

// [3] Εύρεση ground truth για κάθε query με k = 2
    vector<vector<int>> gt_sol;

    vector<int> gt_q0;      // ground truth q0
    gt_q0.push_back(1);     // point με id = 1
    gt_q0.push_back(2);     // point με id = 2
    gt_sol.push_back(gt_q0);

    vector<int> gt_q1;      // ground truth q1
    gt_q1.push_back(3);     // point με id = 3
    gt_sol.push_back(gt_q1);

    gt_sol.push_back(gt_q0);    // ground truth q2 ταυτίζεται με ground truth q0


// [4] Επιβέβαιωση gt_sol με συνάρτησης
    int k = 2;
    vector<vector<int>> gt_func = ground_truth(points, queries, k);

    REQUIRE(gt_sol == gt_func);
}

// /* We comment following test due to long time of valgrind to finish.
// Test passes all assertions.
// SHOULDN'T DELETE TEST! */
// TEST_CASE("Test gtbin_read with big file") {
// // We need to create a binary ground truth file just how src/calculate_groundtruth.cpp does it

//     vector<vector<float>> points = databin_read("datasets/smallscale/dummy-data.bin");
//     vector<vector<float>> queries = queriesbin_read("datasets/smallscale/dummy-queries.bin");
//     vector<vector<int>> gt = ground_truth(points, queries, 100);

//     string output_file = "testing_gtbin_read.bin";

//     ofstream ofs(output_file, ios::out | ios::binary);
//     assert(gt.size() == 5012);
//     for (unsigned i = 0; i < gt.size(); i++) {
//         auto const &gt_sol = gt[i];
//         int num_dimensions = gt_sol.size();

//         // Save num_dimensions first into the file
//         ofs.write(reinterpret_cast<const char *>(&num_dimensions), sizeof(uint32_t));        // num_dimensions is an int

//         // Save ids of neighbors
//         ofs.write(reinterpret_cast<char const *>(&gt_sol[0]), num_dimensions * sizeof(int));
//     }
//     ofs.close();

//     vector<vector<int>> gt2 = gtbin_read(output_file.c_str(), 100);     // The gt2 that we get back should be identical to gt
//     REQUIRE(gt2 == gt);

//     remove(output_file.c_str());
// }